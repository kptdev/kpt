# Copyright 2023 The kpt Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: progressiverolloutstrategies.gitops.kpt.dev
spec:
  group: gitops.kpt.dev
  names:
    kind: ProgressiveRolloutStrategy
    listKind: ProgressiveRolloutStrategyList
    plural: progressiverolloutstrategies
    singular: progressiverolloutstrategy
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ProgressiveRolloutStrategy is the Schema for the progressiverolloutstrategies API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ProgressiveRolloutStrategySpec defines the desired state of ProgressiveRolloutStrategy
            properties:
              description:
                description: Description is a user friendly description of this rollout strategy.
                type: string
              waves:
                description: Waves defines an order set of waves of rolling updates.
                items:
                  description: Wave represents a group of rolling updates in a progressive rollout. It is also referred as steps, stages or phases of a progressive rollout.
                  properties:
                    description:
                      type: string
                    maxConcurrent:
                      description: MaxConcurrent specifies maximum number of concurrent updates to be performed in this wave.
                      format: int64
                      type: integer
                    name:
                      description: Name identifies the wave.
                      type: string
                    targets:
                      description: Targets specifies the clusters that are part of this wave.
                      properties:
                        selector:
                          description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                  required:
                  - maxConcurrent
                  - name
                  type: object
                type: array
            required:
            - waves
            type: object
          status:
            description: ProgressiveRolloutStrategyStatus defines the observed state of ProgressiveRolloutStrategy
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: remotesyncs.gitops.kpt.dev
spec:
  group: gitops.kpt.dev
  names:
    kind: RemoteSync
    listKind: RemoteSyncList
    plural: remotesyncs
    singular: remotesync
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: RemoteSync is the Schema for the remotesyncs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RemoteSyncSpec defines the desired state of RemoteSync
            properties:
              clusterRef:
                description: ClusterReference contains the identify information need to refer a cluster.
                properties:
                  apiVersion:
                    type: string
                  kind:
                    type: string
                  name:
                    type: string
                  namespace:
                    type: string
                required:
                - apiVersion
                - kind
                - name
                - namespace
                type: object
              template:
                properties:
                  metadata:
                    description: Metadata specifies labels and annotations to add to the RSync object.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  spec:
                    properties:
                      git:
                        properties:
                          auth:
                            type: string
                          branch:
                            type: string
                          dir:
                            type: string
                          gcpServiceAccountEmail:
                            type: string
                          noSSLVerify:
                            type: boolean
                          period:
                            type: string
                          proxy:
                            type: string
                          repo:
                            type: string
                          revision:
                            type: string
                          secretRef:
                            description: SecretReference contains the reference to the secret
                            properties:
                              name:
                                description: Name represents the secret name
                                type: string
                            type: object
                        required:
                        - auth
                        - repo
                        type: object
                      sourceFormat:
                        type: string
                    type: object
                type: object
              type:
                enum:
                - RootSync
                - RepoSync
                type: string
            type: object
          status:
            description: RemoteSyncStatus defines the observed state of RemoteSync
            properties:
              conditions:
                description: Conditions describes the reconciliation state of the object.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: 'INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file'
                format: int64
                type: integer
              syncCreated:
                description: Internal only. SyncCreated describes if the external sync has been created.
                type: boolean
              syncStatus:
                description: SyncStatus describes the observed state of external sync.
                type: string
            required:
            - syncCreated
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: rollouts.gitops.kpt.dev
spec:
  group: gitops.kpt.dev
  names:
    kind: Rollout
    listKind: RolloutList
    plural: rollouts
    singular: rollout
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Rollout is the Schema for the rollouts API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RolloutSpec defines the desired state of Rollout
            properties:
              clusters:
                description: Clusters specifies the source for discovering the clusters.
                properties:
                  gcpFleet:
                    description: ClusterSourceGCPFleet represents configuration needed to discover gcp fleet clusters.
                    properties:
                      projectIds:
                        items:
                          type: string
                        type: array
                    required:
                    - projectIds
                    type: object
                  kind:
                    description: ClusterSourceKind contains configuration needed to discover kind clusters.
                    properties:
                      namespace:
                        description: Namespace where configmaps corresponding to kind clusters live defaults to `kind-clusters`
                        type: string
                    type: object
                  sourceType:
                    enum:
                    - KCC
                    - GCPFleet
                    - Kind
                    type: string
                required:
                - sourceType
                type: object
              description:
                description: Description is a user friendly description of this Rollout.
                type: string
              packageToTargetMatcher:
                description: PackageToTargetMatcher specifies the clusters that will receive a specific package.
                properties:
                  matchExpression:
                    type: string
                  type:
                    enum:
                    - AllClusters
                    - Custom
                    type: string
                required:
                - type
                type: object
              packages:
                description: Packages source for this Rollout.
                properties:
                  github:
                    description: GitHubSource defines the packages source in GitHub.
                    properties:
                      selector:
                        description: GitHubSelector defines the selector to apply to packages in GitHub.
                        properties:
                          branch:
                            type: string
                          directory:
                            type: string
                          org:
                            type: string
                          repo:
                            type: string
                          revision:
                            type: string
                          secretRef:
                            description: SecretReference contains the reference to the secret
                            properties:
                              name:
                                description: Name represents the secret name
                                type: string
                            type: object
                        required:
                        - org
                        - repo
                        type: object
                    required:
                    - selector
                    type: object
                  gitlab:
                    description: GitLabSource defines the packages source in GitLab.
                    properties:
                      secretRef:
                        description: SecretReference is the reference to a kubernetes secret that contains GitLab access token
                        properties:
                          name:
                            description: Name represents the secret name
                            type: string
                        type: object
                      selector:
                        description: Selector defines the package selector in GitLab.
                        properties:
                          branch:
                            description: Branch refers to the branch
                            type: string
                          directory:
                            description: Directory refers to the subdirectory path in the project
                            type: string
                          projectID:
                            description: ProjectID is the numerical identifier of the GitLab project It will not be specified if selection involves multiple projects
                            type: string
                          revision:
                            description: Revision refers to the branch, tag of the GitLab repo
                            type: string
                        type: object
                    required:
                    - selector
                    type: object
                  sourceType:
                    enum:
                    - GitHub
                    - GitLab
                    type: string
                required:
                - sourceType
                type: object
              strategy:
                description: Strategy specifies the rollout strategy to use for this rollout.
                properties:
                  allAtOnce:
                    type: object
                  progressive:
                    description: StrategyProgressive defines the progressive rollout strategy to use.
                    properties:
                      name:
                        description: Name of the ProgressiveRolloutStrategy to use.
                        type: string
                      namespace:
                        description: Namespace of the ProgressiveRolloutStrategy to use.
                        type: string
                      pauseAfterWave:
                        description: PauseAfterWave represents the highest wave the strategy will deploy.
                        properties:
                          waveName:
                            description: WaveName represents name of the wave defined in the ProgressiveRolloutStrategy.
                            type: string
                        required:
                        - waveName
                        type: object
                    required:
                    - name
                    - namespace
                    type: object
                  rollingUpdate:
                    properties:
                      maxConcurrent:
                        format: int64
                        type: integer
                    required:
                    - maxConcurrent
                    type: object
                  type:
                    enum:
                    - AllAtOnce
                    - RollingUpdate
                    - Progressive
                    type: string
                required:
                - type
                type: object
              syncTemplate:
                description: SyncTemplate defines the type and attributes for the RSync object used to syncing the packages.
                properties:
                  repoSync:
                    description: RepoSyncTemplate represent the sync template for RepoSync.
                    properties:
                      git:
                        properties:
                          auth:
                            type: string
                          branch:
                            type: string
                          dir:
                            type: string
                          gcpServiceAccountEmail:
                            type: string
                          noSSLVerify:
                            type: boolean
                          period:
                            type: string
                          proxy:
                            type: string
                          repo:
                            type: string
                          revision:
                            type: string
                          secretRef:
                            description: SecretReference contains the reference to the secret
                            properties:
                              name:
                                description: Name represents the secret name
                                type: string
                            type: object
                        required:
                        - auth
                        - repo
                        type: object
                      metadata:
                        description: Metadata specifies labels and annotations to add to the RSync object.
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            type: object
                        type: object
                      sourceFormat:
                        type: string
                    type: object
                  rootSync:
                    description: RootSyncTemplate represent the sync template for RootSync.
                    properties:
                      git:
                        properties:
                          auth:
                            type: string
                          branch:
                            type: string
                          dir:
                            type: string
                          gcpServiceAccountEmail:
                            type: string
                          noSSLVerify:
                            type: boolean
                          period:
                            type: string
                          proxy:
                            type: string
                          repo:
                            type: string
                          revision:
                            type: string
                          secretRef:
                            description: SecretReference contains the reference to the secret
                            properties:
                              name:
                                description: Name represents the secret name
                                type: string
                            type: object
                        required:
                        - auth
                        - repo
                        type: object
                      metadata:
                        description: Metadata specifies labels and annotations to add to the RSync object.
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            type: object
                        type: object
                      sourceFormat:
                        type: string
                    type: object
                  type:
                    enum:
                    - RootSync
                    - RepoSync
                    type: string
                required:
                - type
                type: object
              targets:
                description: Targets specifies the clusters that will receive the KRM config packages.
                properties:
                  selector:
                    description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                        type: object
                    type: object
                    x-kubernetes-map-type: atomic
                type: object
            required:
            - clusters
            - packageToTargetMatcher
            - packages
            - strategy
            type: object
          status:
            description: RolloutStatus defines the observed state of Rollout
            properties:
              clusterStatuses:
                items:
                  properties:
                    name:
                      type: string
                    packageStatus:
                      properties:
                        packageId:
                          type: string
                        status:
                          type: string
                        syncStatus:
                          type: string
                      required:
                      - packageId
                      - status
                      - syncStatus
                      type: object
                  required:
                  - name
                  - packageStatus
                  type: object
                type: array
              conditions:
                description: Conditions describes the reconciliation state of the object.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                format: int64
                type: integer
              overall:
                type: string
              waveStatuses:
                items:
                  properties:
                    clusterStatuses:
                      items:
                        properties:
                          name:
                            type: string
                          packageStatus:
                            properties:
                              packageId:
                                type: string
                              status:
                                type: string
                              syncStatus:
                                type: string
                            required:
                            - packageId
                            - status
                            - syncStatus
                            type: object
                        required:
                        - name
                        - packageStatus
                        type: object
                      type: array
                    name:
                      type: string
                    paused:
                      type: boolean
                    status:
                      type: string
                  required:
                  - name
                  - status
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
