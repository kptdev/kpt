//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2023 The kpt Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha2

import (
	"github.com/GoogleContainerTools/kpt/porch/controllers/packagevariants/api/v1alpha1"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DownstreamTemplate) DeepCopyInto(out *DownstreamTemplate) {
	*out = *in
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		*out = new(string)
		**out = **in
	}
	if in.Package != nil {
		in, out := &in.Package, &out.Package
		*out = new(string)
		**out = **in
	}
	if in.RepoExpr != nil {
		in, out := &in.RepoExpr, &out.RepoExpr
		*out = new(string)
		**out = **in
	}
	if in.PackageExpr != nil {
		in, out := &in.PackageExpr, &out.PackageExpr
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DownstreamTemplate.
func (in *DownstreamTemplate) DeepCopy() *DownstreamTemplate {
	if in == nil {
		return nil
	}
	out := new(DownstreamTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionTemplate) DeepCopyInto(out *FunctionTemplate) {
	*out = *in
	in.Function.DeepCopyInto(&out.Function)
	if in.ConfigMapExprs != nil {
		in, out := &in.ConfigMapExprs, &out.ConfigMapExprs
		*out = make([]MapExpr, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionTemplate.
func (in *FunctionTemplate) DeepCopy() *FunctionTemplate {
	if in == nil {
		return nil
	}
	out := new(FunctionTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InjectionSelectorTemplate) DeepCopyInto(out *InjectionSelectorTemplate) {
	*out = *in
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameExpr != nil {
		in, out := &in.NameExpr, &out.NameExpr
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InjectionSelectorTemplate.
func (in *InjectionSelectorTemplate) DeepCopy() *InjectionSelectorTemplate {
	if in == nil {
		return nil
	}
	out := new(InjectionSelectorTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MapExpr) DeepCopyInto(out *MapExpr) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	if in.KeyExpr != nil {
		in, out := &in.KeyExpr, &out.KeyExpr
		*out = new(string)
		**out = **in
	}
	if in.ValueExpr != nil {
		in, out := &in.ValueExpr, &out.ValueExpr
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MapExpr.
func (in *MapExpr) DeepCopy() *MapExpr {
	if in == nil {
		return nil
	}
	out := new(MapExpr)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectSelector) DeepCopyInto(out *ObjectSelector) {
	*out = *in
	in.LabelSelector.DeepCopyInto(&out.LabelSelector)
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectSelector.
func (in *ObjectSelector) DeepCopy() *ObjectSelector {
	if in == nil {
		return nil
	}
	out := new(ObjectSelector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PackageContextTemplate) DeepCopyInto(out *PackageContextTemplate) {
	*out = *in
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RemoveKeys != nil {
		in, out := &in.RemoveKeys, &out.RemoveKeys
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DataExprs != nil {
		in, out := &in.DataExprs, &out.DataExprs
		*out = make([]MapExpr, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RemoveKeyExprs != nil {
		in, out := &in.RemoveKeyExprs, &out.RemoveKeyExprs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PackageContextTemplate.
func (in *PackageContextTemplate) DeepCopy() *PackageContextTemplate {
	if in == nil {
		return nil
	}
	out := new(PackageContextTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PackageVariantSet) DeepCopyInto(out *PackageVariantSet) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PackageVariantSet.
func (in *PackageVariantSet) DeepCopy() *PackageVariantSet {
	if in == nil {
		return nil
	}
	out := new(PackageVariantSet)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PackageVariantSet) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PackageVariantSetList) DeepCopyInto(out *PackageVariantSetList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PackageVariantSet, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PackageVariantSetList.
func (in *PackageVariantSetList) DeepCopy() *PackageVariantSetList {
	if in == nil {
		return nil
	}
	out := new(PackageVariantSetList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PackageVariantSetList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PackageVariantSetSpec) DeepCopyInto(out *PackageVariantSetSpec) {
	*out = *in
	if in.Upstream != nil {
		in, out := &in.Upstream, &out.Upstream
		*out = new(v1alpha1.Upstream)
		**out = **in
	}
	if in.Targets != nil {
		in, out := &in.Targets, &out.Targets
		*out = make([]Target, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PackageVariantSetSpec.
func (in *PackageVariantSetSpec) DeepCopy() *PackageVariantSetSpec {
	if in == nil {
		return nil
	}
	out := new(PackageVariantSetSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PackageVariantSetStatus) DeepCopyInto(out *PackageVariantSetStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PackageVariantSetStatus.
func (in *PackageVariantSetStatus) DeepCopy() *PackageVariantSetStatus {
	if in == nil {
		return nil
	}
	out := new(PackageVariantSetStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PackageVariantTemplate) DeepCopyInto(out *PackageVariantTemplate) {
	*out = *in
	if in.Downstream != nil {
		in, out := &in.Downstream, &out.Downstream
		*out = new(DownstreamTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.AdoptionPolicy != nil {
		in, out := &in.AdoptionPolicy, &out.AdoptionPolicy
		*out = new(v1alpha1.AdoptionPolicy)
		**out = **in
	}
	if in.DeletionPolicy != nil {
		in, out := &in.DeletionPolicy, &out.DeletionPolicy
		*out = new(v1alpha1.DeletionPolicy)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LabelExprs != nil {
		in, out := &in.LabelExprs, &out.LabelExprs
		*out = make([]MapExpr, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.AnnotationExprs != nil {
		in, out := &in.AnnotationExprs, &out.AnnotationExprs
		*out = make([]MapExpr, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PackageContext != nil {
		in, out := &in.PackageContext, &out.PackageContext
		*out = new(PackageContextTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.Pipeline != nil {
		in, out := &in.Pipeline, &out.Pipeline
		*out = new(PipelineTemplate)
		(*in).DeepCopyInto(*out)
	}
	if in.Injectors != nil {
		in, out := &in.Injectors, &out.Injectors
		*out = make([]InjectionSelectorTemplate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PackageVariantTemplate.
func (in *PackageVariantTemplate) DeepCopy() *PackageVariantTemplate {
	if in == nil {
		return nil
	}
	out := new(PackageVariantTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PipelineTemplate) DeepCopyInto(out *PipelineTemplate) {
	*out = *in
	if in.Validators != nil {
		in, out := &in.Validators, &out.Validators
		*out = make([]FunctionTemplate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mutators != nil {
		in, out := &in.Mutators, &out.Mutators
		*out = make([]FunctionTemplate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PipelineTemplate.
func (in *PipelineTemplate) DeepCopy() *PipelineTemplate {
	if in == nil {
		return nil
	}
	out := new(PipelineTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryTarget) DeepCopyInto(out *RepositoryTarget) {
	*out = *in
	if in.PackageNames != nil {
		in, out := &in.PackageNames, &out.PackageNames
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryTarget.
func (in *RepositoryTarget) DeepCopy() *RepositoryTarget {
	if in == nil {
		return nil
	}
	out := new(RepositoryTarget)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Target) DeepCopyInto(out *Target) {
	*out = *in
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]RepositoryTarget, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RepositorySelector != nil {
		in, out := &in.RepositorySelector, &out.RepositorySelector
		*out = new(v1.LabelSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.ObjectSelector != nil {
		in, out := &in.ObjectSelector, &out.ObjectSelector
		*out = new(ObjectSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(PackageVariantTemplate)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Target.
func (in *Target) DeepCopy() *Target {
	if in == nil {
		return nil
	}
	out := new(Target)
	in.DeepCopyInto(out)
	return out
}
