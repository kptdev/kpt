# Copyright 2023 The kpt Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: packagevariantsets.config.porch.kpt.dev
spec:
  group: config.porch.kpt.dev
  names:
    kind: PackageVariantSet
    listKind: PackageVariantSetList
    plural: packagevariantsets
    singular: packagevariantset
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: PackageVariantSet represents an upstream package revision and
          a way to target specific downstream repositories where a variant of the
          upstream package should be created.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PackageVariantSetSpec defines the desired state of PackageVariantSet
            properties:
              adoptionPolicy:
                type: string
              annotations:
                additionalProperties:
                  type: string
                type: object
              deletionPolicy:
                type: string
              labels:
                additionalProperties:
                  type: string
                type: object
              targets:
                items:
                  properties:
                    objects:
                      description: 'option 3: a selector against a set of arbitrary
                        objects'
                      properties:
                        repoName:
                          properties:
                            fromField:
                              type: string
                            value:
                              type: string
                          type: object
                        selectors:
                          items:
                            properties:
                              annotations:
                                additionalProperties:
                                  type: string
                                description: Annotations on the target resources
                                type: object
                              apiVersion:
                                description: APIVersion of the target resources
                                type: string
                              kind:
                                description: Kind of the target resources
                                type: string
                              labelSelector:
                                description: Labels on the target resources
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: Name of the target resources
                                type: string
                              namespace:
                                description: Namespace of the target resources
                                type: string
                            type: object
                          type: array
                      type: object
                    package:
                      description: 'option 1: an explicit repo/package name pair'
                      properties:
                        name:
                          type: string
                        repo:
                          type: string
                      type: object
                    packageName:
                      description: For options 2 and 3, PackageName specifies how
                        to create the name of the package variant
                      properties:
                        baseName:
                          properties:
                            fromField:
                              type: string
                            value:
                              type: string
                          type: object
                        namePrefix:
                          properties:
                            fromField:
                              type: string
                            value:
                              type: string
                          type: object
                        nameSuffix:
                          properties:
                            fromField:
                              type: string
                            value:
                              type: string
                          type: object
                      type: object
                    repositories:
                      description: 'option 2: a label selector against a set of repositories'
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                      type: object
                  type: object
                type: array
              upstream:
                properties:
                  package:
                    properties:
                      name:
                        type: string
                      repo:
                        type: string
                    type: object
                  ref:
                    type: string
                  revision:
                    type: string
                type: object
            type: object
          status:
            description: PackageVariantSetStatus defines the observed state of PackageVariantSet
            properties:
              conditions:
                description: Conditions describes the reconciliation state of the
                  object.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: false
    storage: false
    subresources:
      status: {}
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: PackageVariantSet represents an upstream package revision and
          a way to target specific downstream repositories where a variant of the
          upstream package should be created.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PackageVariantSetSpec defines the desired state of PackageVariantSet
            properties:
              targets:
                items:
                  properties:
                    objectSelector:
                      description: 'option 3: a selector against a set of arbitrary
                        objects'
                      properties:
                        apiVersion:
                          description: APIVersion of the target resources
                          type: string
                        kind:
                          description: Kind of the target resources
                          type: string
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                        name:
                          description: Name of the target resource
                          type: string
                      type: object
                    repositories:
                      description: 'Exactly one of Repositories, RepositorySeletor,
                        and ObjectSelector must be populated option 1: an explicit
                        repositories and package names'
                      items:
                        properties:
                          name:
                            description: Name contains the name of the Repository
                              resource, which must be in the same namespace as the
                              PackageVariantSet resource.
                            type: string
                          packageNames:
                            description: PackageNames contains names to use for package
                              instances in this repository; that is, the same upstream
                              will be instantiated multiple times using these names.
                            items:
                              type: string
                            type: array
                        required:
                        - name
                        type: object
                      type: array
                    repositorySelector:
                      description: 'option 2: a label selector against a set of repositories'
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                      type: object
                    template:
                      description: Template specifies how to generate a PackageVariant
                        from a target
                      properties:
                        adoptionPolicy:
                          description: AdoptionPolicy allows overriding the PackageVariant
                            adoption policy
                          type: string
                        annotationExprs:
                          description: AnnotationsExprs allows specifying the spec.Annotations
                            field of the generated PackageVariant using CEL to dynamically
                            create the keys and values. Entries in this field take
                            precedent over those with the same keys that are present
                            in Annotations.
                          items:
                            description: MapExpr is used for various fields to calculate
                              map entries. Only one of Key and KeyExpr may be specified;
                              similarly only on of Value and ValueExpr may be specified.
                            properties:
                              key:
                                type: string
                              keyExpr:
                                type: string
                              value:
                                type: string
                              valueExpr:
                                type: string
                            type: object
                          type: array
                        annotations:
                          additionalProperties:
                            type: string
                          description: Annotations allows specifying the spec.Annotations
                            field of the generated PackageVariant
                          type: object
                        deletionPolicy:
                          description: DeletionPolicy allows overriding the PackageVariant
                            deletion policy
                          type: string
                        downstream:
                          description: Downstream allows overriding the default downstream
                            package and repository name
                          properties:
                            package:
                              type: string
                            packageExpr:
                              type: string
                            repo:
                              type: string
                            repoExpr:
                              type: string
                          type: object
                        injectors:
                          description: Injectors allows specifying the spec.Injectors
                            field of the generated PackageVariant
                          items:
                            description: InjectionSelectorTemplate is used to calculate
                              the injectors field of the resulting package variants.
                              Exactly one of the Name and NameExpr fields must be
                              specified. The other fields are optional.
                            properties:
                              group:
                                type: string
                              kind:
                                type: string
                              name:
                                type: string
                              nameExpr:
                                type: string
                              version:
                                type: string
                            type: object
                          type: array
                        labelExprs:
                          description: LabelsExprs allows specifying the spec.Labels
                            field of the generated PackageVariant using CEL to dynamically
                            create the keys and values. Entries in this field take
                            precedent over those with the same keys that are present
                            in Labels.
                          items:
                            description: MapExpr is used for various fields to calculate
                              map entries. Only one of Key and KeyExpr may be specified;
                              similarly only on of Value and ValueExpr may be specified.
                            properties:
                              key:
                                type: string
                              keyExpr:
                                type: string
                              value:
                                type: string
                              valueExpr:
                                type: string
                            type: object
                          type: array
                        labels:
                          additionalProperties:
                            type: string
                          description: Labels allows specifying the spec.Labels field
                            of the generated PackageVariant
                          type: object
                        packageContext:
                          description: PackageContext allows specifying the spec.PackageContext
                            field of the generated PackageVariant
                          properties:
                            data:
                              additionalProperties:
                                type: string
                              type: object
                            dataExprs:
                              items:
                                description: MapExpr is used for various fields to
                                  calculate map entries. Only one of Key and KeyExpr
                                  may be specified; similarly only on of Value and
                                  ValueExpr may be specified.
                                properties:
                                  key:
                                    type: string
                                  keyExpr:
                                    type: string
                                  value:
                                    type: string
                                  valueExpr:
                                    type: string
                                type: object
                              type: array
                            removeKeyExprs:
                              items:
                                type: string
                              type: array
                            removeKeys:
                              items:
                                type: string
                              type: array
                          type: object
                        pipeline:
                          description: Pipeline allows specifying the spec.Pipeline
                            field of the generated PackageVariant
                          properties:
                            mutators:
                              description: Mutators is used to caculate the pipeline.mutators
                                field of the resulting package variants.
                              items:
                                description: FunctionTemplate is used in generating
                                  KRM function pipeline entries; that is, it is used
                                  to generate Kptfile Function objects.
                                properties:
                                  configMap:
                                    additionalProperties:
                                      type: string
                                    description: '`ConfigMap` is a convenient way
                                      to specify a function config of kind ConfigMap.'
                                    type: object
                                  configMapExprs:
                                    description: ConfigMapExprs allows use of CEL
                                      to dynamically create the keys and values in
                                      the function config ConfigMap. Entries in this
                                      field take precedent over those with the same
                                      keys that are present in ConfigMap.
                                    items:
                                      description: MapExpr is used for various fields
                                        to calculate map entries. Only one of Key
                                        and KeyExpr may be specified; similarly only
                                        on of Value and ValueExpr may be specified.
                                      properties:
                                        key:
                                          type: string
                                        keyExpr:
                                          type: string
                                        value:
                                          type: string
                                        valueExpr:
                                          type: string
                                      type: object
                                    type: array
                                  configPath:
                                    description: '`ConfigPath` specifies a slash-delimited
                                      relative path to a file in the current directory
                                      containing a KRM resource used as the function
                                      config. This resource is excluded when resolving
                                      ''sources'', and as a result cannot be operated
                                      on by the pipeline.'
                                    type: string
                                  exclude:
                                    description: '`Exclude` are used to specify resources
                                      on which the function should NOT be executed.
                                      If not specified, all resources selected by
                                      `Selectors` are selected.'
                                    items:
                                      description: Selector specifies the selection
                                        criteria please update IsEmpty method if more
                                        properties are added
                                      properties:
                                        annotations:
                                          additionalProperties:
                                            type: string
                                          description: Annotations on the target resources
                                          type: object
                                        apiVersion:
                                          description: APIVersion of the target resources
                                          type: string
                                        kind:
                                          description: Kind of the target resources
                                          type: string
                                        labels:
                                          additionalProperties:
                                            type: string
                                          description: Labels on the target resources
                                          type: object
                                        name:
                                          description: Name of the target resources
                                          type: string
                                        namespace:
                                          description: Namespace of the target resources
                                          type: string
                                      type: object
                                    type: array
                                  exec:
                                    description: "Exec specifies the function binary
                                      executable. The executable can be fully qualified
                                      or it must exists in the $PATH e.g: \n exec:
                                      set-namespace exec: /usr/local/bin/my-custom-fn"
                                    type: string
                                  image:
                                    description: "`Image` specifies the function container
                                      image. It can either be fully qualified, e.g.:
                                      \n image: gcr.io/kpt-fn/set-labels \n Optionally,
                                      kpt can be configured to use a image registry
                                      host-path that will be used to resolve the image
                                      path in case the image path is missing (Defaults
                                      to gcr.io/kpt-fn). e.g. The following resolves
                                      to gcr.io/kpt-fn/set-labels: \n image: set-labels"
                                    type: string
                                  name:
                                    description: '`Name` is used to uniquely identify
                                      the function declaration this is primarily used
                                      for merging function declaration with upstream
                                      counterparts'
                                    type: string
                                  selectors:
                                    description: '`Selectors` are used to specify
                                      resources on which the function should be executed
                                      if not specified, all resources are selected'
                                    items:
                                      description: Selector specifies the selection
                                        criteria please update IsEmpty method if more
                                        properties are added
                                      properties:
                                        annotations:
                                          additionalProperties:
                                            type: string
                                          description: Annotations on the target resources
                                          type: object
                                        apiVersion:
                                          description: APIVersion of the target resources
                                          type: string
                                        kind:
                                          description: Kind of the target resources
                                          type: string
                                        labels:
                                          additionalProperties:
                                            type: string
                                          description: Labels on the target resources
                                          type: object
                                        name:
                                          description: Name of the target resources
                                          type: string
                                        namespace:
                                          description: Namespace of the target resources
                                          type: string
                                      type: object
                                    type: array
                                type: object
                              type: array
                            validators:
                              description: Validators is used to caculate the pipeline.validators
                                field of the resulting package variants.
                              items:
                                description: FunctionTemplate is used in generating
                                  KRM function pipeline entries; that is, it is used
                                  to generate Kptfile Function objects.
                                properties:
                                  configMap:
                                    additionalProperties:
                                      type: string
                                    description: '`ConfigMap` is a convenient way
                                      to specify a function config of kind ConfigMap.'
                                    type: object
                                  configMapExprs:
                                    description: ConfigMapExprs allows use of CEL
                                      to dynamically create the keys and values in
                                      the function config ConfigMap. Entries in this
                                      field take precedent over those with the same
                                      keys that are present in ConfigMap.
                                    items:
                                      description: MapExpr is used for various fields
                                        to calculate map entries. Only one of Key
                                        and KeyExpr may be specified; similarly only
                                        on of Value and ValueExpr may be specified.
                                      properties:
                                        key:
                                          type: string
                                        keyExpr:
                                          type: string
                                        value:
                                          type: string
                                        valueExpr:
                                          type: string
                                      type: object
                                    type: array
                                  configPath:
                                    description: '`ConfigPath` specifies a slash-delimited
                                      relative path to a file in the current directory
                                      containing a KRM resource used as the function
                                      config. This resource is excluded when resolving
                                      ''sources'', and as a result cannot be operated
                                      on by the pipeline.'
                                    type: string
                                  exclude:
                                    description: '`Exclude` are used to specify resources
                                      on which the function should NOT be executed.
                                      If not specified, all resources selected by
                                      `Selectors` are selected.'
                                    items:
                                      description: Selector specifies the selection
                                        criteria please update IsEmpty method if more
                                        properties are added
                                      properties:
                                        annotations:
                                          additionalProperties:
                                            type: string
                                          description: Annotations on the target resources
                                          type: object
                                        apiVersion:
                                          description: APIVersion of the target resources
                                          type: string
                                        kind:
                                          description: Kind of the target resources
                                          type: string
                                        labels:
                                          additionalProperties:
                                            type: string
                                          description: Labels on the target resources
                                          type: object
                                        name:
                                          description: Name of the target resources
                                          type: string
                                        namespace:
                                          description: Namespace of the target resources
                                          type: string
                                      type: object
                                    type: array
                                  exec:
                                    description: "Exec specifies the function binary
                                      executable. The executable can be fully qualified
                                      or it must exists in the $PATH e.g: \n exec:
                                      set-namespace exec: /usr/local/bin/my-custom-fn"
                                    type: string
                                  image:
                                    description: "`Image` specifies the function container
                                      image. It can either be fully qualified, e.g.:
                                      \n image: gcr.io/kpt-fn/set-labels \n Optionally,
                                      kpt can be configured to use a image registry
                                      host-path that will be used to resolve the image
                                      path in case the image path is missing (Defaults
                                      to gcr.io/kpt-fn). e.g. The following resolves
                                      to gcr.io/kpt-fn/set-labels: \n image: set-labels"
                                    type: string
                                  name:
                                    description: '`Name` is used to uniquely identify
                                      the function declaration this is primarily used
                                      for merging function declaration with upstream
                                      counterparts'
                                    type: string
                                  selectors:
                                    description: '`Selectors` are used to specify
                                      resources on which the function should be executed
                                      if not specified, all resources are selected'
                                    items:
                                      description: Selector specifies the selection
                                        criteria please update IsEmpty method if more
                                        properties are added
                                      properties:
                                        annotations:
                                          additionalProperties:
                                            type: string
                                          description: Annotations on the target resources
                                          type: object
                                        apiVersion:
                                          description: APIVersion of the target resources
                                          type: string
                                        kind:
                                          description: Kind of the target resources
                                          type: string
                                        labels:
                                          additionalProperties:
                                            type: string
                                          description: Labels on the target resources
                                          type: object
                                        name:
                                          description: Name of the target resources
                                          type: string
                                        namespace:
                                          description: Namespace of the target resources
                                          type: string
                                      type: object
                                    type: array
                                type: object
                              type: array
                          type: object
                      type: object
                  type: object
                type: array
              upstream:
                properties:
                  package:
                    type: string
                  repo:
                    type: string
                  revision:
                    type: string
                type: object
            type: object
          status:
            description: PackageVariantSetStatus defines the observed state of PackageVariantSet
            properties:
              conditions:
                description: Conditions describes the reconciliation state of the
                  object.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
